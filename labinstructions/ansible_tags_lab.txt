Lab Objective
The objective of this lab is to demonstrate how Ansible playbooks may incorporate 'tags', which control which sections of a playbook execute at runtime. If you have a large playbook, it may become useful to be able to run only a specific part of it rather than running everything in the playbook. Ansible supports a “tags:” attribute for this reason.

Control which tags do or do not run from the command line, with the --tags or --skip-tags options. Alternatively, in Ansible configuration settings (ansible.cfg), with the TAGS_RUN and TAGS_SKIP options.

For example, if you wanted to just run the “configuration” and “packages” part of a very long playbook, you can use the --tags option on the command line:

ansible-playbook example.yml --tags "configuration,packages"
On the other hand, if you want to run a playbook without certain tagged tasks, you can use the --skip-tags command-line option:

ansible-playbook example.yml --skip-tags "packages"
You can see which tasks will be executed with --tags or --skip-tags by combining it with --list-tasks:

ansible-playbook example.yml --tags "configuration,packages" --list-tasks
The official documentation on tags can be found here: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tags.html

Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

If you haven't yet, check the documentation for template module: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html

Edit ~/.ansible.cfg

student@bchd:~$ vim ~/.ansible.cfg

Make the file look like the following:

[defaults]
# default location of inventory
# this can be a file or a directory
inventory = /home/student/mycode/inv/dev/
# prevents playbook from hanging on new connections
host_key_checking = no
# turn on logging
log_path = /tmp/ansible.log
# set the var ansible_managed
ansible_managed = Managed by the Ansible Team
Create a templates directory.

student@bchd:~$ mkdir -p ~/mycode/templates/

Create a config file for the planetexpress ship under ~/mycode/templates/ and call it cargo_manifest.txt.j2.

student@bchd:~$ vim ~/mycode/templates/cargo_manifest.txt.j2

# cargo_manifest.txt
# {{ ansible_managed }}

[cargo]

holding_bay1 = {{ cargo1 }}

holding_bay2 = {{ cargo2  }}

holding_bay3 = {{ cargo3 }}
Save and exit with Esc and then :wq

Create a second config file for the planetexpress ship under ~/mycode/templates/. Call this second template navigation_charts.cfg.j2.

student@bchd:~$ vim ~/mycode/templates/navigation_charts.cfg.j2

Create the following within ~/mycode/templates/navigation_charts.cfg.j2

# navigation_charts.cfg
# {{ ansible_managed }}

[darkmatter-nav]

star_system = {{ star }}

planet = {{ planet  }}

latitude = {{ lat }}

longitude = {{ long }}
Save and exit with Esc and then :wq

Create a third and final file for the planetexpress crew under ~/mycode/templates/. Call this third template orders.txt.j2.

student@bchd:~$ vim ~/mycode/templates/orders.txt.j2

Create the following simple template.

# orders.txt
# {{ ansible_managed }}

[orders]
Primary Mission: {{ pmiss }}

Secondary Mission: {{ smiss }}
Save and exit with Esc and then :wq

Create a basic playbook file called playbook-crewauto.yml

student@bchd:~$ vim ~/mycode/playbook-crewauto.yml

Copy and paste the following into your new playbook.

---
 - name: Playbook with tags
   hosts: planetexpress
   connection: ansible.builtin.ssh

   vars:
     cargo1: "prizes for claw crane"
     cargo2: "popcorn"
     cargo3: "pillows"

   # this file will fill in the empty values found in the *.j2 files
   vars_files:
     - /home/student/mycode/vars/tempvars.yml

   tasks:
     - name: "Deploy orders to the crew"
       ansible.builtin.template:
         src: /home/student/mycode/templates/orders.txt.j2 #name of the template on ansible controller
         dest: ~/orders.txt #name of the completed file to be placed on the target system
       tags:
       - orders

     - name: "Deploy the cargo manifest"
       ansible.builtin.template:
         src: /home/student/mycode/templates/cargo_manifest.txt.j2 #name of the template on ansible controller
         dest: ~/cargo_manifest.txt #name of the completed file to be placed on the target system
       tags:
       - cargo
       - ship_prep

     - name: "Install navigation charts"
       ansible.builtin.template:
         src: /home/student/mycode/templates/navigation_charts.cfg.j2 #name of the template on ansible controller
         dest: ~/navigation_charts.cfg #name of the completed file to be placed on the target system
       tags:
       - nav
       - ship_prep
Save and exit with Esc and then :wq

Verify the playbook contents with a cat command.

student@bchd:~$ cat ~/mycode/playbook-crewauto.yml

Let's make a folder where we can stuff a variables file, we can call it ~/mycode/vars/

student@bchd:~$ mkdir -p ~/mycode/vars/

Create a variable file, where we'll define our remaining variables. We actually already referenced this inside of the playbook. Call this, ~/mycode/vars/tempvars.yml

student@bchd:~$ vim ~/mycode/vars/tempvars.yml

Create the following:

---
star: "sol"
planet: "Moon of Earth"
lat: "58"
long: "23"
pmiss: "Good news everyone! We're delivering movie theater supplies."
smiss: "Bring back some Diet Slurm Cola"
Save and exit with Esc and then :wq

Great job. That was a lot of set up, but now we can start running our playbook. Issue the following command. By including the cargo tag, we are indicating that we only wish for tasks tagged cargo to run.

student@bchd:~$ ansible-playbook ~/mycode/playbook-crewauto.yml --tags="cargo"

The playbook should only run the setup module (gathering facts) followed by the Deploy the cargo manifest task.

SSH into each host and confirm that they all now contain a cargo_manifest.txt within their home directory.

First, SSH to bender.

student@bchd:~$ ssh bender@10.10.2.3

Confirm bender has cargo_manifest.txt

bender@bender:~$ cat cargo_manifest.txt

Exit from bender

bender@bender:~$ exit

Repeat the procedure above for the other two hosts. SSH into both fry@10.10.2.4 and zoidberg@10.10.2.5 confirm that each have the cargo_manifest.txt file.

Run the playbook again. This time, use the ship_prep tag.

student@bchd:~$ ansible-playbook ~/mycode/playbook-crewauto.yml --tags="ship_prep"

The playbook should only run the setup module (gathering facts) followed by the Deploy the cargo manifest task, and finally the Install navigation charts. Both of these tasks are tagged with ship_prep

SSH into each host and confirm that they all still contain cargo_manifest.txt, and now also contain navigation_charts.cfg within their home directory.

First, SSH to bender.

student@bchd:~$ ssh bender@10.10.2.3

Confirm bender has navigation_charts.cfg

bender@bender:~$ cat navigation_charts.cfg

Confirm bender still has cargo_manifest.txt

bender@bender:~$ cat cargo_manifest.txt

Exit from bender

bender@bender:~$ exit

Repeat the procedure above for the other two hosts. SSH into both fry@10.10.2.4 and zoidberg@10.10.2.5 confirm that each have a copy of cargo_manifest.txt, as well as navigation_charts.cfg

One last time, let's run the playbook. This time we will only run the tag orders, and also use the limit command to ensure only fry receives them.

student@bchd:~$ ansible-playbook ~/mycode/playbook-crewauto.yml --tags="orders" --limit="fry"

The playbook should only run the setup module (gathering facts) followed by the Deploy orders to the crew task, and this should be limited to only the host fry.

SSH to fry.

student@bchd:~$ ssh fry@10.10.2.4

Confirm fry has orders.txt

fry@fry:~$ cat orders.txt

Confirm fry still has the other two files, cargo_manifest.txt as well as navigation_charts.cfg.

fry@fry:~$ ls

Exit from fry

fry@fry:~$ exit

Repeat the procedure above for the other two hosts. SSH into both bender@10.10.2.3 and zoidberg@10.10.2.5 to confirm that each have a copy of cargo_manifest.txt, as well as navigation_charts.cfg but do NOT have a copy of orders.txt.

That was a long one, but way to go. Hopefully, how to use the key word tags is now more clear.

That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "tags in playbooks"
git push origin
cd ~/ 
