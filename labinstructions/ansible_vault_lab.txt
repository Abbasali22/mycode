Lab Objective
The objective of this lab is to learn to encode text files with Ansible Vault. Vault installs along side Ansible, so you already have it on your system. It's job is to both encrypt text files (password files, variable files, playbooks), as well as decrypt. With ansible vault, you can permanently decrypt files, or just decrypt them for run-time. The default cipher is AES (which is shared-secret based).

Procedure
Open a new terminal, then change directory to the /home/student/ directory.

student@bchd:~$ cd ~

Great! Now create a directory to store variables in.

student@bchd:~$ mkdir -p ~/mycode/vars

Move into the ~/mycode directory.

student@bchd:~$ cd ~/mycode

Open a new text file that we can encrypt with ansible-vault.

student@bchd:~/mycode$ vim ~/mycode/vars/mypasswords.yml

Create the following:

---
datacenter: pennsylvania
hostname: tardis
password: DoctorWho?TheGoodDoctor
secondary: tardis2
dlspeed: Download_60M
upspeed: Upload_20M
password2: QuestForGlory1989EGA
password3: LauraBowDaggerOfAmonRa1992
Save and exit. Be sure the file is saved as, mypasswords.yml

Now let's encrypt that file with ansible-vault.

student@bchd:~/mycode$ ansible-vault encrypt ~/mycode/vars/mypasswords.yml

When prompted, type the password qwerty

When prompted, re-type the password qwerty

Great. Now print out the encrypted file.

student@bchd:~/mycode$ cat ~/mycode/vars/mypasswords.yml

If it worked, you should 'just' see an encrypted file. This file could be considered quite a bit safer than clear text.

To edit an encrypted file in place, use the ansible-vault edit command. This command will decrypt the file to a temporary file and allow you to edit the file, saving it back when done and removing the temporary file:

student@bchd:~/mycode$ ansible-vault edit ~/mycode/vars/mypasswords.yml

When prompted, type the password qwerty

You don't need to make any changes, just appreciate that the file is decrypted for editing purposes only. Exit the file.

To ensure that is the case, cat the file again. It should still be encrypted.

student@bchd:~/mycode$ cat ~/mycode/vars/mypasswords.yml

Suppose typing out the password every single time you try to use this encrypted file isn't desirable. Let's put the password inside a hidden file instead.

student@bchd:~/mycode$ echo 'qwerty' > ~/mycode/.vaultpw

Now run the same command above, but by using the --vault-password-file option you won't have to type in the password yourself.

student@bchd:~/mycode$ ansible-vault edit ~/mycode/vars/mypasswords.yml --vault-password-file=~/mycode/.vaultpw

Now exit the file.

Now let's decrypt that file with ansible-vault.

student@bchd:~/mycode$ ansible-vault decrypt ~/mycode/vars/mypasswords.yml

You should be able to view and understand the file, as it has now been decrypted.

student@bchd:~/mycode$ cat ~/mycode/vars/mypasswords.yml

Open a new text file to create a playbook that we might encrypt with ansible-vault.

student@bchd:~/mycode$ vim ~/mycode/playbook-vault01.yml

Create the following:

---
- name: Secret playbook
  connection: local
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Print to the screen
      ansible.builtin.debug:
        msg: "This is your secret playbook. You and you alone must retain control of it. Your mission, Jim, should you choose to accept it. Is to first encrypt, then run this playbook (while it is encrypted). This message will self-destruct in 5 seconds."
Save and exit.

Try running your unencrypted playbook.

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-vault01.yml

Now, encrypt the playbook file with ansible-vault.

student@bchd:~/mycode$ ansible-vault encrypt ~/mycode/playbook-vault01.yml

When prompted, type the password qwerty

When prompted, re-type the password qwerty

Print out the encrypted file.

student@bchd:~/mycode$ cat ~/mycode/playbook-vault01.yml

Once again, if it worked, you should 'just' see an encrypted file. This file could be considered quite a bit safer than clear text.

Next run the encrypted playbook.

student@bchd:~/mycode$ ansible-playbook --vault-id @prompt ~/mycode/playbook-vault01.yml

When prompted, enter qwerty and the playbook should run.

Now try and run it without needing to prompt for the password.

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-vault01.yml --vault-password-file=~/mycode/.vaultpw

Suppose we have a variable file that we're interested in keeping secret and safe. This could be credentials or sensitive IP addresses. Let's start by creating an encrypted vars file.

student@bchd:~/mycode$ vim ~/mycode/vars/oscreds.yml

Create the following, which mimics the values required to authenticate to OpenStack.

---
imscloud:
  auth:
    auth_url: http://192.168.122.10:35357/
    project_name: demo
    username: demo
    password: 0penstack
  region_name: RegionOne
Save and exit.

Encrypt this new credential file with ansible vault.

student@bchd:~/mycode$ ansible-vault encrypt ~/mycode/vars/oscreds.yml

When prompted, enter qwerty

Now create a playbook.

student@bchd:~/mycode$ vim ~/mycode/playbook-vault02.yml

Create the following:

---
- name: Extra vars vault
  connection: local
  hosts: localhost
  gather_facts: no

  # reference the encrypted variable file
  vars_files:
    - vars/oscreds.yml

  tasks:
    - name: print out encrypted vars
      ansible.builtin.debug:
        msg: "{{ imscloud }}"
Save and exit with Esc and then :wq

Now run the playbook, and pass a command to decrypt the vars_file.

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-vault02.yml -e @~/mycode/vars/oscreds.yml --ask-vault-pass

The playbook should run, and print out the credentials found within the password file. Obviously, you wouldn't want to print out your credentials! However, this proves that your variables have been successfully decrypted for the purposes of running your playbook. Double check that the file itself is still encrypted.

student@bchd:~/mycode$ cat ~/mycode/vars/oscreds.yml

CHALLENGE 01 - Place the no_log: true tag on the task or at the play level, and rerun the playbook, to depress the appearance of imscloud

Suppose we wanted to create a playbook with encrypted vars inside of it. Run the following command to encrypt the string pAssw0rD and map it to the key mypass. Note, if you were to use a $ in your password, be sure to ESCAPE it with a backslash, or it will be interpreted by the shell (passing $$ at the shell will echo a PID). Therefore, the proper way to pass a password containing $ symbols is pA\$\$w0rD

student@bchd:~/mycode$ ansible-vault encrypt_string "pAssw0rD" --name "mypass"

Encrypt with qwerty

Look at that. It pointed mypass to an encrypted value. Do it again, only this time, dump the value to the file vault_var.yml

student@bchd:~/mycode$ ansible-vault encrypt_string "pAssw0rD" --name "mypass" > /home/student/mycode/vault_var.yml

Encrypt with qwerty

Create a playbook.

student@bchd:~/mycode$ vim ~/mycode/playbook-vault03.yml

Create the following playbook.

---
- name: encrypt a string
  connection: local
  hosts: localhost
  gather_facts: no

  vars_files:
    - /home/student/mycode/vault_var.yml

  tasks:
    - name: print an encrypted string
      ansible.builtin.debug:
         msg: "{{ mypass }}"
Save and exit with Esc and then :wq

Run your playbook with the following command. When prompted, enter qwerty

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-vault03.yml --ask-vault-pass

The playbook should display pAssw0rD

That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "Ansible vault"
git push origin
cd ~/

