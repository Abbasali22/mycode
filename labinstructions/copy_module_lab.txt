
Lab Objective
The objective of this lab is to demonstrate the Ansible copy module. The copy module copies a file from the local (controller) or remote host machine(s) to a location on the remote machine(s). If you want to harvest files from remote hosts, use the fetch module to return copies to the local box (controller).

In this lab, you will perform the following tasks:

Copy a static file from localhost to the target hosts in an Ansible Inventory.
Copy a variable to a file on the target hosts.
Attribute Ownership and Privilege parameters for a file being copied.
Resources:

Ansible Module - ansible.builtin.copy
Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

Just to stay organized, let's create a directory for files that have no jinja2 in them.

student@bchd:~$ mkdir -p ~/mycode/files/

Let's create Fry's resume and save it in our new "files" directory. Just copy the text below into the file and save it.

student@bchd:~$ vim ~/mycode/files/fry.txt

Name Philip J. Fry I (Fry)
Born August 14, 1974
Height 5ft 9in
Weight: 180 lbs.
Native to the 20th century who was cryogenically frozen seconds into the year 2000, having fallen in just as 1999 ended.
He was revived in 2999 and subsequently became a delivery boy for the Planet Express Company. He is the protagonist of Futurama.
To save and exit, press Esc and then type :wq

Read about the documentation on the copy module.

student@bchd:~$ ansible-doc ansible.builtin.copy

Scroll up and down with the arrow keys, press q to quit.

Create a playbook that we can use to demonstrate the copy module, playbook-copy.yml.

student@bchd:~$ vim ~/mycode/playbook-copy.yml

Create the following playbook.

---
- name: Copying files from controller to hosts
  hosts: planetexpress
  connection: ansible.builtin.ssh
  gather_facts: true # default is true

  tasks:

    - name: Copy Fry's resume to hosts
      ansible.builtin.copy:
        src: ~/mycode/files/fry.txt   # on the controller
        dest: ~/fry.txt      # home directory on hosts
To save and exit, press Esc and then type :wq

Next run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/playbook-copy.yml

Now let us connect to the one of the remote hosts with secure shell to see the change we made. Password is alta3 if you need it.

student@bchd:~$ ssh bender

List the contents of the home directory.

bender@bender:~$ ls

fry.txt
Concatenate the contents of fry.txt.

bender@bender:~$ cat fry.txt

Name Philip J. Fry I (Fry)
Born August 14, 1974
Height 5ft 9in
Weight: 180 lbs.
Native to the 20th century who was cryogenically frozen seconds into the year 2000, having fallen in just as 1999 ended.
He was revived in 2999 and subsequently became a delivery boy for the Planet Express Company. He is the protagonist of Futurama.
Time to close out of bender!

bender@bender:~$ exit

Feel free to repeat the previous steps to verify the file was pushed to the other hosts (but this is not necessary) -- fry, zoidberg, farnsworth.

From bchd, create a new playbook, playbook-copy2.yml. In this playbook, we'll be creating a user and a group using their respective modules. This is because when we copy a file using an ansible playbook, it is a best practice to include the file/group owners, and permissions. We do this by setting the owner, group, and mode parameters.

student@bchd:~$ vim ~/mycode/playbook-copy2.yml

---
- name: Copying content from controller to hosts
  hosts: planetexpress:!farnsworth
  connection: ansible.builtin.ssh
  gather_facts: true # default is true

  tasks:
  - name: Create the new group for ipv4 access
    ansible.builtin.group:
      name: sysadmin
      state: present
    become: yes

  - name: Create a sysadmin user for ipv4 access
    ansible.builtin.user:
      name: admin1
      comment: "Example Admin"
      state: present
      shell: /bin/bash
      system: no
      createhome: yes
      group: sysadmin
    become: yes

  - name: Copy gather fact var data into hosts
    ansible.builtin.copy:
      content: "{{ ansible_all_ipv4_addresses }}" # facts gathered from host
      dest: /home/admin1/ipv4info.txt      # home directory on hosts
      backup: yes   # make backup of original
      force: yes    # file always copied when content is diff
      owner: admin1 # set the owner (chown) of the file
      group: sysadmin # set the group of the file
      mode: '0644' # set the access permissions of the file
        # mode can also be formatted as follows:
            # mode: u=rw,g=r,o=r
            # mode: u+rw,g-wx,o-wx
    become: yes
To save and exit, press Esc and then type :wq

In this playbook, we copied 'content' instead of 'src'. This technique becomes more interesting when we get into using variables (copying the content of variables into a file is a useful technique). In this example, a file called, ipv4info.txt is created containing that hosts IPv4 info harvested from the gather_facts module.

Try running the playbook!

student@bchd:~$ ansible-playbook ~/mycode/playbook-copy2.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~$ ssh bender@10.10.2.3

Let's switch user to admin1 which our playbook created.

bender@bender:~$ sudo -i -u admin1

List the contents of admin1's home directory including details.

admin1@bender:~$ ls -l

total 4
-rw-r--r-- 1 admin1 sysadmin 13 Jan  3 20:49 ipv4info.txt
Brilliant! Not only did we copy a file, but we also attributed the correct ownership, and access permissions!

Exit out of the admin1 user.

admin1@bender:~$ exit

Exit out of bender.

bender@bender:~$ exit

Answer the following questions:

Q: What's a popular use for the copy module?
A: Moving data from a playbook environment into a static file for long term storage.
Q: Is the copy module used when building playbooks for storage or network applications?
A: All the time. As you'll learn, when running against an API or network connection, Ansible runs the copy module in a "local" mode. What that means is the "dest" value becomes the Ansible controller. It becomes VERY useful anytime you need to get data "out" of your playbook environment and into a static file.
That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "Working with copy module"
git push origin
cd ~/
