Lab Objective
This objective of this lab will demonstrate the Ansible error handling. Before we continue, consider how Ansible responds to errors without error handling, and how error handling might change that default behavior.

Encountering errors

As we can see, if a host encounters an error, playbook execution will stop against that particular host, and continue against others. With error handling, we can make Ansible "recover" from errors encountered by hosts.

Error handling

In 2.0, Ansible added a block feature to allow for logical grouping of tasks and even in-play error handling. Most of what you can apply to a single task can be applied at the block level, which also makes it much easier to set data or directives common to the tasks. The block may be further augmented by rescue and always.

block - This is what you want to do. Blocks allow for logical grouping of tasks and in play error handling. Most of what you can apply to a single task (with the exception of loops) can be applied at the block level.

rescue - Why do we fall down? So we can learn to stand back up! Think of rescue as how you "stand back up" or "how to recover". If you do not encounter any failures within the rescue, your playbook will continue.

always - These tasks are always performed, even if your block and rescue sections encounter failures, you'll still perform these tasks.

By combining blocked tasks with rescue and always tasks, it is possible to create highly responsive playbook that's can rollback when they encounter an error. We'll explore some of those techniques in this lab.

Resources:

Blocks within Ansible
Error handling within Ansible
Ansible keywords for block
GitHub - Ansible - Values of DISTRIBUTION and OS_FAMILY
Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

Ensure you have a place to work.

student@bchd:~$ mkdir -p ~/mycode/

Move into your workspace.

student@bchd:~$ cd ~/mycode/

Create a basic playbook file called ~/mycode/playbook-error-handler01.yml

student@bchd:~/mycode$ vim ~/mycode/playbook-error-handler01.yml

Create the following solution:

---
- name: Learning about blocks
  hosts: planetexpress
  connection: ansible.builtin.ssh   # default connection type
  gather_facts: no

  tasks:

  - name: BLOCK - This is what we want to TRY to do
    block:

      - name: Example task
        ansible.builtin.shell: "echo 'My single task ran' > example.txt"

      - name: Example task
        ansible.builtin.shell: "echo 'My second task ran' >> example.txt"

      - name: Example task
        ansible.builtin.shell: "echo 'My third task ran' >> example.txt"
Save and exit with :wq

Next run the playbook.

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-error-handler01.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~/mycode$ ssh bender@10.10.2.3

Look at the file that was produced.

bender@bender:~$ cat example.txt

My single task ran
My second task ran
My third task ran.
Cool. So, all the tasks within the block executed. Delete the file.

bender@bender:~$ rm example.txt

Exit from the ssh session.

bender@bender:~$ exit

Create a playbook called, ~/mycode/playbook-error-handler02.yml

student@bchd:~/mycode$ vim ~/mycode/playbook-error-handler02.yml

Create the following playbook:

---
- name: Learning about blocks
  hosts: planetexpress
  connection: ansible.builtin.ssh   # default connection type
  gather_facts: no

  tasks:

  - name: BLOCK - This is what we want to TRY to do
    block:

      - name: Example task
        ansible.builtin.shell: "echo 'My single task ran' > example.txt"

      - name: Example task
        ansible.builtin.shell: "echo 'My second task ran' >> example.txt"

      - name: Example task
        ansible.builtin.shell: "echo 'My third task ran' >> example.txt"

    # this should only run IF we encounter a failure
    rescue:
      - name: Rescue task
        ansible.builtin.shell: "echo 'My rescue code ran. Maybe it undoes whatever the block tried to do' >> example.txt"

    # this should ALWAYS run (even if we had a failure in the rescue block!)
    always:
      - name: Always task
        ansible.builtin.shell: "echo 'This always runs. Maybe it is a commit, or an entry in a log' >> example.txt"
Save and exit with :wq

Run the playbook. The rescue section of the block should not run (or be skipped).

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-error-handler02.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~/mycode$ ssh bender@10.10.2.3

Look at the file that was produced.

bender@bender:~$ cat example.txt

My single task ran
My second task ran
My third task ran.
This always runs. Maybe it is a commit, or an entry in a log
Appears as if all the tasks within the block executed, no tasks within the rescue section executed, however, the tasks within the always section did execute. Delete the file. The always tasks will always execute, even on a failure! A good tasks to put in the always section might be instructions for Ansible to send you an email with the results of the play. To send email with Ansible, research the mail module.

bender@bender:~$ rm example.txt

Exit from the ssh session.

bender@bender:~$ exit

Create a new playbook, ~/mycode/playbook-error-handler03.yml. In this playbook, we will insert an error.

student@bchd:~/mycode$ vim ~/mycode/playbook-error-handler03.yml

Create the following playbook with an error in the block. Note, you can always throw an error by making a reference to /bin/false.

---
- name: Learning about blocks
  hosts: planetexpress
  connection: ansible.builtin.ssh   # default connection type
  gather_facts: no

  tasks:

  - name: BLOCK - This is what we want to TRY to do
    block:

      - name: Example task
        ansible.builtin.shell: "echo 'My single task ran' > example.txt"

      - name: Example task
        ansible.builtin.shell: "echo 'My second task ran' >> example.txt"

      - name: Example task (mimic a failure)
        ansible.builtin.shell: "/bin/false"

    # this should only run IF we encounter a failure
    rescue:
      - name: Rescue task
        ansible.builtin.shell: "echo 'My rescue code ran. Maybe it undoes whatever the block tried to do' >> example.txt"

    # this should ALWAYS run (even if we had a failure in the rescue block!)
    always:
      - name: Always task
        ansible.builtin.shell: "echo 'This always runs. Maybe it is a commit, or an entry in a log' >> example.txt"
Save and exit with :wq

Next run the playbook.

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-error-handler03.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~/mycode$ ssh bender@10.10.2.3

Look at the file that was produced.

bender@bender:~$ cat example.txt

My single task ran
My second task ran
My rescue code ran. Maybe it undoes whatever the block tried to do
This always runs. Maybe it is a commit, or an entry in a log
This time all of our tasks ran! Even the tasks in the rescue and always blocks. That's because the rescue is "how you stand back up", and the always section is always performed, even on a failure and rescue.

Remove the example file.

bender@bender:~$ rm example.txt

Exit from the ssh session.

bender@bender:~$ exit

By pulling together block, rescue, and always, we were able to create very responsive code blocks, that are still highly readable. Ansible is domain-specific code, that is easy to use, and highly predictable. However, it does offer enough complexity, to allow you to adapt Ansible playbooks to mimic your own internal procedures and methodologies for administering changes. Let's create a playbook that works in a responsive manner, and can rollback if it encounters an error.

student@bchd:~/mycode$ vim ~/mycode/playbook-error-handler04.yml

Create the following solution:

---
## Our goal is to create a playbook that perform pre-checks, changes, and post-checks.
## Upon a failure / error, the playbook will "ROLLBACK" any changes it has made thus far.
## This playbook can serve as a template for constructing 'intelligent' playbooks
## within your enterprise

- name: A playbook demonstrating Error Handling techniques
  hosts: planetexpress
  gather_facts: yes
  connection: ansible.builtin.ssh

  vars:
    # list of services to install (separated by commas and available in the apt repo)
    # apached = apache http server
    # vsftpd = sftp server
    apps_to_install: [apache2, vsftpd]

  tasks:
    ## our job is to install some software on ONLY Debian hosts within the network
    ## therefore our PRECHECK PHASE needs to involve a 'check' to ensure we ONLY are on
    ## Debian hosts
    - name: PRECHECK PHASE
      block:
           - name: Ensure the platforms we logged into are Debian
             ansible.builtin.fail:
               msg: "Ansible has detected this host is not part of the Debian family."
             when: ansible_os_family != "Debian"

      rescue:
           - name: PRECHECK PHASE - FAILED
             ansible.builtin.fail:
               msg: "PRECHECK PHASE - FAILED. Nothing to rollback. Exiting..."


    ## this is the block containing the work we actually want to do
    - name: MAINTENANCE PHASE
      block:
           - name: Install services(s) to our remote host(s)
             ansible.builtin.apt:
               state: present
               name: "{{ apps_to_install }}"
             become: yes

           - name: Turn up the service(s) installed on our remote host(s)
             ansible.builtin.service:
               name: "{{ item }}"
               state: started
             loop: "{{ apps_to_install }}"
             become: yes

      ## this rescue only runs if the BLOCK fails
      rescue:
           - name: Remove services(s) on our remote host(s)
             ansible.builtin.apt:
               state: absent
               name: "{{ apps_to_install }}"
             become: yes

           - name: MAINTENANCE PHASE - FAILED
             ansible.builtin.fail:
               msg: "MAINTENANCE PHASE - FAILED. Rollback complete. Exiting..."

    - name: POSTCHECK PHASE
      block:

           - name: populate service facts
             ansible.builtin.service_facts:

           - name: Print out the service facts
             ansible.builtin.debug:
               var: ansible_facts.services

           - name: Ensure all of the new services installed
             ansible.builtin.fail:
               msg: "Ansible has detected not all services have installed."
             when: ansible_facts.services.get(item).state != "running"
             loop: "{{ apps_to_install }}"

      ## this rescue only runs if the BLOCK fails
      rescue:
           - name: Remove services(s) on our remote host(s)
             ansible.builtin.apt:
               state: absent
               name: "{{ apps_to_install }}"
             become: yes

           - name: MAINTENANCE PHASE - FAILED
             ansible.builtin.fail:
               msg: "POSTCHECK PHASE - FAILED. Rollback complete. Exiting..."         

        ## in a real deployment you might consider an ALWAYS section to provide the results
        ## of how the playbook ran
        # always:
        #      - name: EXAMPLE - Email your team the results of the playbook
        #        ansible.builtin.mail:   # mail module is used to send SMTP (email)
        #           host:
        #           port:
        #           password:
        #           username:
        #           subject:
        #           body: send an email with results via the mail module  
Save and exit with :wq

Run the playbook. Farnsworth will be removed from the run as the OS_DISTRIBUTION for that machine is RedHat and not Debian. For a complete list see the source code on github that is responsible for harvesting the value of OS_DISTRIBUTION. All of the available values begin around line 55 defined within OSDIST_LIST https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/facts/system/distribution.py

student@bchd:~/mycode$ ansible-playbook ~/mycode/playbook-error-handler04.yml

Try injecting a fail into the playbook with the following snippet at the end of the PRECHECK PHASE block (just before the rescue). Your goal is to make a failure within the first of our three sections, and observe how the playbook reacts. It should exit without moving onto the MAINTENANCE PHASE.

- name: Inject a fail
  ansible.builtin.shell: "/bin/false"
Remove the code from your PRECHECK PHASE block, and move it to the end of the MAINTENANCE PHASE block (just before the rescue). Once you've made this change, run your playbook a second time. It should uninstall the installed applications, then exit without moving onto the POSTCHECK PHASE.

Remove the code from your MAINTENANCE PHASE block, and move it to the end of the POSTCHECK PHASE block (just before the rescue). Once you've made this change, run your playbook a second time. It should uninstall the installed applications, then exit.

That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "Error handling"
git push origin
cd ~/

