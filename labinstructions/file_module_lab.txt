Lab Objective
The objective of this lab is to learn about the file module, which can be used to create files, directories, and more.

In this lab, you'll create ~/station_docs/ on some target host machines. A common mistake is to assume modules outputting data will create non-existent directories. Instead, it is much more common that the module will simply fail. Therefore, it is important to understand how directories might be created.

In this lab, you will perform the following tasks:

Using bad practices, we'll intentionally create a failing playbook to demonstrate inappropriate approaches to variable management.
We'll correct the mistake with a simple playbook, removing files created by our failed playbook.
Create an Ansible Playbook utilizing the file module, and the fileuser variable established in the inventory file.
Create an Ansible Playbook utilizing the file module, and the ansible_user variable established in the inventory file.
Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

If you haven't already, read about the documentation on the file module.

student@bchd:~$ ansible-doc file

Scroll up and down with the arrow keys, press q to quit.

Create a basic playbook file called playbook-file.yml. Notice that this playbook uses the loop keyword.

student@bchd:~$ vim ~/mycode/playbook-file.yml

---
- name: A playbook showing the file module
  hosts: planetexpress
  connection: ssh   # use the connection plugin, ssh.py (this is the default)
  gather_facts: no   # no need to define ansible_facts in this playbook

  vars:
    # the variable "st" is mapped to "directory"
    st: directory

  tasks:
  - name: "Create directory where Space Station documents will reside"
    become_user: root
    become: true
    file:
      path: "/home/{{ item }}/station_docs/"
      state: "{{ st }}"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: "0755"
    loop: [fry, bender, zoidberg]
To save and quit out of vim, press ESC and then type :wq.

Run the playbook. The following instruction says, "limit the run against all hosts, with the exception of farnsworth". You should expect the playbook to fail.

student@bchd:~$ ansible-playbook ~/mycode/playbook-file.yml --limit 'all:!farnsworth'

As you can see, there were errors with this approach. Do you know why? The {{ item }} will start an iteration for the items in the list and try to make that change to each host. The hosts, however, do not have one another's hostname as a user or a group, so then you receive that error.

Not only did it not complete cleanly, it had some unintended consequences. SSH over to bender, and check out the results.

student@bchd:~$ ssh bender

List the local directories.

bender@bender:~$ ls

List the directories in /home/ on the bender machine.

bender@bender:~$ ls /home/

bender  fry  zoidberg
Interesting. So we can see a Space Station Docs, but the way we wrote our loop, it also created additional home directories on our machine. Bender, now also has a /home/fry/ and /home/zoidberg directory on it (the same error occurred on the other machines as well). However, they lack the new directory station_docs. We didn't want this to happen. We just wanted station_docs to appear in each user's home directory.

Let's end our SSH session with Bender for now.

bender@bender:~$ exit

To "undo" the damage, rerun the playbook, but change the value of st to "absent".

student@bchd:~$ vim ~/mycode/playbook-file.yml

---
- name: A playbook showing the file module
  hosts: planetexpress
  connection: ssh   # use the connection plugin, ssh.py (this is the default)
  gather_facts: no   # no need to define ansible_facts in this playbook

  vars:
    # the variable "st" is mapped to "directory"
    st: absent # <--- This is the variable we need to edit.
               # This will remove the file should it exist
  tasks:
  - name: "Create directory where Space Station documents will reside"
    become_user: root
    become: true
    file:
      path: "/home/{{ item }}/station_docs/"
      state: "{{ st }}"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: "0755"
    loop: [fry, bender, zoidberg]
To save and quit out of vim, press ESC and then type :wq.

Let's run the playbook again, while still omitting farnsworth.

student@bchd:~$ ansible-playbook ~/mycode/playbook-file.yml --limit 'all:!farnsworth'

All cleaned up and good to go!

Now that we've cleaned up our mess, let's create a new playbook called ~/mycode/playbook-file02.yml. We can use a host variable to fix the problem we encountered.

student@bchd:~$ vim ~/mycode/playbook-file02.yml

---
- name: A playbook showing the file module
  hosts: planetexpress
  connection: ssh    # use the connection plugin, ssh.py (this is the default)
  gather_facts: no   # no need to define ansible_facts in this playbook

  tasks:
   - name: "Create directory where Space Station documents will reside"
     become_user: root
     become: true
     file:
        # the var "fileuser" is a host variable and defined in ~/mycode/inv/dev/hosts
        path: "/home/{{ fileuser }}/station_docs/"
        state: directory
        owner: "{{ fileuser }}"
        group: "{{ fileuser }}"
        mode: "0755"
To save and quit out of vim, press ESC and then type :wq.

To understand what is about to happen, you have to understand what a host variable is. Host variables are ways to transfer unique values directly to hosts. In this case, we wanted the value of fileuser to have the value of our hosts, each time we run the playbook. Check out the inventory (created by the setup script) for a better understanding.

student@bchd:~$ batcat ~/mycode/inv/dev/hosts

Let's give the new playbook a spin and see what happens!

student@bchd:~$ ansible-playbook ~/mycode/playbook-file02.yml

It works! That said, there is still a better technique we can use. For now, let's connect to the remote hosts with secure shell to see the changes we made. First, to bender to ensure the Space Station directory has been created.

student@bchd:~$ ssh bender

List the files and folders on the bender machine.

bender@bender:~$ ls

station_docs
Exit bender machine.

bender@bender:~$ exit

Now to check on the fry machine.

student@bchd:~$ ssh fry@10.10.2.4

List the files and folder on the fry machine.

fry@fry:~$ ls

station_docs
Exit the fry machine

fry@fry:~$ exit

Finally, check out the zoidberg machine.

student@bchd:~$ ssh zoidberg

List the files and folders on the zoidberg machine.

zoidberg@zoidberg:~$ ls

station_docs
Exit from the ssh session back to the bchd host.

zoidberg@zoidberg:~$ exit

So what we just learned, was that a host variable is mapped ONLY to the host beside which it appears in the inventory file. Cool! Establishing variables within the inventory file is a clean method of managing all of our variables. From our own experience, we've found the inventory file to be the best place to maintain our variables.

We've got two more playbooks to create to finally reinforce our understanding. We'll begin with a new playbook called ~/mycode/playbook-file03.yml which will create a directory called station_docs on every host. Then, we'll create a file called navdata with content we set in the playbook itself.

student@bchd:~$ vim ~/mycode/playbook-file03.yml

---
- name: A playbook showing the file module
  hosts: planetexpress
  gather_facts: yes   # very important to gather_facts in this example
  connection: ssh     # default connection type, ssh.py

  tasks:
   - name: Create directory where Space Station documents will reside
     become_user: root
     become: true
     file:
        # the var "fileuser" is a host variable
        path: "/home/{{ fileuser }}/station_docs/"
        state: directory
        owner: "{{ fileuser }}"
        group: "{{ fileuser }}"
        mode: "0755"

   - name: Copy content into a file with the year-mo-day
     copy:
        # the var "fileuser" is a host variable
        # ansible_date_time.date is defined by gather_facts
        dest: "/home/{{ fileuser }}/station_docs/navdata-{{ ansible_date_time.date }}.txt"
        content: "Earth\nMars\nSaturn\nEuropa\n"
To save and quit out of vim, press ESC and then type :wq.

Run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/playbook-file03.yml

Confirm that the files were created by logging into bender machine.

student@bchd:~$ ssh bender

List the files and folders on the bender machine.

bender@bender:~$ ls station_docs/

navdata-2023-01-04.txt
View the contents of the document in station_docs

bender@bender:~$ cat station_docs/navdata-*

Exit bender machine.

bender@bender:~$ exit

Make one last example of this playbook. In this example, we'll ditch the use of fileuser. If we think critically about what we're trying to do, it's reach for the "name" of the user we are logged in as. That information is already defined as ansible_user (which is already a host variable). No real need map it a second time as fileuser. Read about the ansible_user variable here: https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html Then, create the following solution:

student@bchd:~$ vim ~/mycode/playbook-file04.yml

---
- name: A playbook showing the file module
  hosts: planetexpress

  tasks:
   - name: Create directory where Space Station documents will reside
     become_user: root
     become: true
     file:
        # the var "ansible_user" is a host variable AND connection variable
        path: "/home/{{ ansible_user }}/station_docs/"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

   - name: "Create directory where Space Station documents will reside"
     copy:
        # the var "ansible_user" is a host variable AND connection variable
        # ansible_date_time.date is defined by gather_facts
        dest: "/home/{{ ansible_user }}/station_docs/navdata-{{ ansible_date_time.date }}.txt"
        content: "Earth\nMars\nSaturn\nEuropa"
To save and quit out of vim, press ESC and then type :wq.

Run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/playbook-file04.yml

Verify the files were created correctly. SSH on to bender one last time!

student@bchd:~$ ssh bender

List the contents of the station_docs directoy.

bender@bender:~$ ls station_docs/

navdata-2023-01-04.txt
Answer the following questions:

Q: What is the application for the file module?
A: To create files or folders (directories) or remove them.
Q: Is this module used often?
A: All the time! There is another great module to check out, 'stat', which can return checksums and build conditionals when trying to determine IF a file or folder exists. However, if you need to ensure a file or folder is created, reach for 'file'.
That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "working with files"
git push origin
cd ~/


