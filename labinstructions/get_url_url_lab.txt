Lab Objective
The objective of this lab is to give an overview of the get_url, and uri Ansible modules. The primary purpose for these modules is HTTP interaction. Where the get_url module is primarily for sending an HTTP GET to retrieve content, the uri module is much more flexible, and can be used to craft any type of HTTP message.

In this lab, you will perform the following tasks:

Create an Ansible Playbook utilizing the get_url module to download a file to target host.
Setup an Apache Server on a target host, utilizing the following modules: apt, blockinfile, file, copy, pip, htpasswd, and shell.
Create an Ansible Playbook utilizing the get_uri module to make GET method HTTP requests to obtain a password protected file.
Read the documentation of the get_url module here:
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/get_url_module.html

Read the documentation of the uri module here:
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html

Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

If you haven't already, read about the documentation on the get_url module.

student@bchd:~$ ansible-doc get_url

Scroll up and down with the arrow keys, press q to quit.

Create the following playbook: ~/mycode/geturl-playbook01.yml. This playbook will download the archived file from the target URL.

student@bchd:~$ vim ~/mycode/geturl-playbook01.yml

---
- name: Getting files
  hosts: planetexpress   # run against the entire planetexpress group
  connection: ssh        # use the connection module, ssh.py (this is the default)
  gather_facts: no       # do not run the module, setup.py, to define ansible_facts

  tasks:
  - name: "Download virus protection software to install on hosts"
    ansible.builtin.get_url:
      url: http://www.clamav.net/downloads/production/clamav-0.99.3.tar.gz
      dest: ~/clamav-0.99.3.tar.gz
To save and quit out of vim, press ESC and then type :wq.

Next run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/geturl-playbook01.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~$ ssh bender

Check to see if the newly downloaded gzipped file is on the remote hosts.

bender@bender:~$ ls

clamav-0.99.3.tar.gz
Exit from the ssh session.

bender@bender:~$ exit

That completes the get_url exercise. Now let's move on to set up a server so we can test the uri module.

The next playbook will set up an Apache server on the fry host. Additionally, a 'protected' file will be created that can only be accessed with a username, sammy and a password, larry. While get_url would not be a good choice to download this file, uri could handle this. Create the following playbook that will install an Apache server on the fry machine, which will serve this url: http://10.10.2.4/admin/secure.txt.

student@bchd:~$ vim ~/mycode/geturl-setupserver-playbook02.yml

---
- name: Setup apache2 server
  hosts: fry    # running only against fry
  gather_facts: no
  connection: ssh   # use the connection plugin, ssh.py (default)
  become: yes

  tasks:
  - name: Install apache2 server and ensure pip is installed
    ansible.builtin.apt:
      name:
      - apache2
      - python3-pip
      state: present

  - name: Move configuration block to secure the file
    ansible.builtin.blockinfile:
      insertafter: EOF
      path: /etc/apache2/apache2.conf
      block: |
              Alias /admin /var/www/html/admin
        
              <Directory /var/www/html/admin>
                <Files secure.txt>
                  AuthType basic
                  AuthName "Secured Files area"
                  AuthUserFile /etc/apache2/.htpasswd
                  Require user sammy
                </Files>
                order allow,deny
                deny from all
                satisfy any
              </Directory>

  - name: create the admin/ folder
    ansible.builtin.file:
      state: directory
      path: /var/www/html/admin/

  - name: create a protected file we can download
    ansible.builtin.copy:
      content: "This is a super secret file!\nIf you can read it, you hacked the gibson!"
      dest: /var/www/html/admin/secure.txt
      mode: u=rw,g=r,o=r

  # required for htpasswd to be controlled by python3
  - name: install passlib
    ansible.builtin.pip:
      name: passlib
      state: present

  # Apache webserver uses htpasswd to make passwords, it so happens ansible has a module to
  # edit this password file. In production, passwords should always be encrypted with vault!
  - name: set a password via htpasswd
    htpasswd:
      path: /etc/apache2/.htpasswd
      name: sammy
      password: larry
      owner: root
      group: root

  - name: restart service
    shell: "/etc/init.d/apache2 restart"
To save and quit out of vim, press ESC and then type :wq.

Run your playbook.

student@bchd:~$ ansible-playbook ~/mycode/geturl-setupserver-playbook02.yml

Test the playbook with the following curl command. This tries to use the username "sammy" and password "larry" to authenticate.

student@bchd:~$ curl http://10.10.2.4/admin/secure.txt --user "sammy:larry"

This is a super secret file!
If you can read it, you hacked the gibson!
If you get an HTTP failure code (4xx), something isn't setup correctly. Assuming everything is going well, let's write a playbook that tries to download the same file to our controller.

This next playbook will use the uri module to send a "custom" HTTP message to our HTTP webserver. Read about that module now.

student@bchd:~$ ansible-doc uri

Scroll up and down with the arrow keys, press q to quit.

Create a playbook using the uri module. To download a file to the controller, we'll need to run our playbook in local connection mode.

student@bchd:~$ vim ~/mycode/uri-playbook01.yml

---
- name: Get-URL Download the Protected File
  hosts: localhost  # target ourselves
  connection: local # we do not want to SSH anywhere. Run these actions locally
  gather_facts: no  # no need to gather_facts about ourselves (defines ansible_facts)

  tasks:
    # in this task we alert Ansible to expect a 401 response
    # the 'register' keyword saves the response sent back to the uri module
    - name: Access the Website and make sure the URL is live
      ansible.builtin.uri:
        method: GET # send an HTTP GET to the location defined by param "url" (default)
        url: http://10.10.2.4/admin/secure.txt
        status_code: 401 # we expect a 401 failure
        return_content: true
      register: validateurl  # save the "response" (defines the var validateurl)

    - name: "INFO: HTTP Response for the URL"
      ansible.builtin.debug:   # the debug module prints to the screen
              var: validateurl.msg

    - name: Access the same URL with Basic Authentication and Download the file
      ansible.builtin.uri:
        method: GET
        url: http://10.10.2.4/admin/secure.txt
        status_code: 200 # this is the default, 200 means "success" in HTTP
        return_content: yes
        url_username: sammy  # this time include "sammy" as UN
        url_password: larry  # this time include "larry" as PW      
      register: validateurl  # overwrite the variable "validateurl"

    - name: Show that the content was still retrieved
      ansible.builtin.debug:
              var: validateurl.content
             
    - name: Put secret content into a file
      ansible.builtin.copy:
        content: "{{ validateurl.content }}"
        dest: ~/ansible-downloaded-the-secret-file.txt
To save and quit out of vim, press ESC and then type :wq.

Run your playbook.

student@bchd:~$ ansible-playbook ~/mycode/uri-playbook01.yml

The playbook demonstrated that the file was downloaded, but confirm with the following command.

student@bchd:~$ batcat ~/ansible-downloaded-the-secret-file.txt

Great! That's it for this lab.

CHALLENGE 01 (OPTIONAL) - Rewrite the server playbook so that the user "sammy" and password "larry" are defined by variables.

CHALLENGE 02 (OPTIONAL) - Secure the plain-text passwords (and possibly usernames). You may eliminate them with vars_prompt or secure them with Ansible Vault. Both of these techniques are covered within other labs.

Answer the following questions:

Q: What is the application for the get_url module?
A: This module allows Ansible to download content from the web. That content could be HTML, JSON, XML, configuration files, or other data.
Q: Does Ansible have other ways to download data?
A: Yes! Many. You could use the uri module, and register the results. You could also find success with the lookup plugin. Both of these techniques you'll learn in later labs. And still many more exist. The merits of each will be discussed later on.
That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "Get url"
git push origin
cd ~/

