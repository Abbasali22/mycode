Lab Objective
The objective of this lab is to demonstrate use of the template module. The template module expects to move a file (template) formatted with Jinja2 formatting, to a target location. Jinja2 allows for many templating 'tricks' that make it a very useful module for creating those things with dynamic configurations (like configuration files and web pages).

In this lab, you will perform the following tasks:

Create a Jinja2 Template with basic variables.
Create an Ansible Playbook which will utilize the template module, and contain a dataset to complete the provided template.
Create a Jinja2 Template with If/Elif/Else statements.
Create a vars file to provide the values for our If/Elif/Else Jinja2 Template.
Create an Ansible Playbook which will utilize the If/Elif/Else Jinja2 template and the template module to produce .txt and .cfg files.
Create a Jinja2 Template with a For Loop.
Create an Ansible Playbook which will utilize the For Loop Jinja2 template and the template module to produce a .txt. file.
Important go skim the documentation for template: https://docs.ansible.com/ansible/latest/modules/template_module.html

Procedure
We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

student@bchd:~$ bash ~/px/scripts/full-setup.sh

Create a templates directory.

student@bchd:~$ mkdir -p ~/mycode/templates/

Create a config file for the planetexpress ship under ~/mycode/templates/ and call it ship.cfg.j2. In this fictitious example, we want a finished file called ship.cfg. We add the .j2 extension to indicate that this file is a template. Essentially, it is 'unfinished'.

student@bchd:~$ vim ~/mycode/templates/ship.cfg.j2

#Description of  Prof. Farnsworth's ship

Intergalactic Ship Registration:

  name: {{ ship_name }}
  type: {{ ship_type  }}

  engines:

    type: {{ engines }}
      max capacity: {{ dark_matter_balls }}
    backup: {{ backup_engines }}
To save and quit out of vim, press ESC and then type :wq.

Next, we'll create a basic playbook file called template-playbook01.yml. This playbook will source the Jinja2 template we created and generate a file called ship.cfg which reads in the variables in our playbook to fill out the template.

student@bchd:~$ vim ~/mycode/template-playbook01.yml

---
- name: Exploring the template module and jinja expressions
  hosts: planetexpress
  gather_facts: no   # runs the "setup" module on remote hosts
  connection: ansible.builtin.ssh   # default connection type

  # these variables are used in the template ship.cfg.j2
  vars:
    ship_name: Bessie
    ship_type: Intergalactic
    engines: Dark Matter
    dark_matter_balls: 63
    backup_engines: Chemical


  tasks:
    - name: Configure spaceship registration
      ansible.builtin.template:  
        src: templates/ship.cfg.j2    # name of the template on ansible controller
        dest: ~/ship.cfg              # name of the completed file to be placed on the target system
To save and quit out of vim, press ESC and then type :wq.

Let's run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/template-playbook01.yml

Now let's connect to the one of the remote hosts with secure shell to see the change we made.

student@bchd:~$ ssh bender

Print out the new ship.cfg file. Notice that this is now a completed config file. It is no longer a template. Ansible filled it in for us.

bender@bender:~$ cat ship.cfg

#Description of  Prof. Farnsworth's ship

Intergalactic Ship Registration:

  name: Bessie
  type: Intergalactic

  engines:

    type: Dark Matter
      max capacity: 63
    backup: Chemical
Exit the bender machine.

bender@bender:~$ exit

Create the mission-orders.txt.j2 template. Within this solution, we test the value of planet. Using jinja2 conditionals within our template, we can dynamically produce different config files depending on values of variable(s). These values might be set by the operator, or collected during the playbook's execution.

student@bchd:~$ vim ~/mycode/templates/mission-orders.txt.j2

# This file is managed by Ansible -- changes will not persist!

Good news, {{ ansible_user }}! We have another mission to accomplish:

{% if planet|lower == "luna park" %}
Delivery to Luna Park
Contents: Prizes for the claw crane
Delivery at: Luna Park, Moon

{% elif planet|lower == "cineplex 14" %}
Delivery to Cineplex 14
Contents: Popcorn
Delivery at: Cineplex 14

{% elif planet|lower == "omicron persei 8" %}
Delivery to Omicron Persei 8
Contents: Candy hearts
Delivery at: Omicron Persei 8

{% else %}
Delivery to Earth
Contents: R&R / Time Off
Delivery at: HQ
{% endif %}
To save and quit out of vim, press ESC and then type :wq. New to Jinja2 and templating? Check out https://jinja.palletsprojects.com/en/2.11.x/

Answer the following questions:

Q1: Where / how is the variable ansible_user being defined?
A1: It is actually defined in the inventory file. This variable controls how to SSH to a remote system, however, you can also use the value of that variable within templates if you would like.
Q2: What is the "|lower" code about?
A2: This is a Jinja2 "filter". They're kind of a "cheese" version of python. All Jinja2 filters are usable (avail on their doc site). Ansible also has a few Jinja filters developed explicitly for use within Ansible. These unique jinja filters are documented on Ansible's doc pages. Later labs devote time to exploring j2 "filters".
This time we will map our variables externally. Best practice says to put them into a directory called vars/ local to the playbook.

student@bchd:~$ mkdir -p ~/mycode/vars/

Create the following external variable file. For reference, you can find the list of Ansible precedence rules here: https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html

student@bchd:~$ vim ~/mycode/vars/planetexpress.yml

---
ship_name: Bessie
ship_type: Intergalactic
engines: Dark Matter
dark_matter_balls: 63
backup_engines: Chemical
planet: earth
To save and quit out of vim, press ESC and then type :wq. Notice that our list of variables now also includes a mapping for planet.

Create a new playbook. This time, we're working with both templates, ship.cfg and mission-orders.txt.j2. Let's see how these fit together with our parameters file.

student@bchd:~$ vim ~/mycode/template-playbook02.yml

---
- name: Exploring the template module and jinja expressions
  hosts: planetexpress
  gather_facts: no   # runs the "setup" module on remote hosts
  connection: ansible.builtin.ssh   # default connection type

  # these variables are used to build templates
  vars_files:
    - vars/planetexpress.yml

  tasks:
    - name: Configure spaceship registration
      ansible.builtin.template:
        src: templates/ship.cfg.j2    # name of the template on ansible controller
        dest: ~/ship.cfg              # name of the completed file to be placed on the target system

    - name: Configure mission orders
      ansible.builtin.template:
        src: templates/mission-orders.txt.j2    # name of the template on ansible controller
        dest: ~/mission-orders.txt              # name of the completed file to be placed on the target system
To save and quit out of vim, press ESC and then type :wq.

Re-run your playbook to push the change.

student@bchd:~$ ansible-playbook ~/mycode/template-playbook02.yml

Once again, connect to the one of the remote hosts. Once again, confirm the ~/ship.cfg file exists, as well as, ~/mission-orders.txt

student@bchd:~$ ssh bender

Confirm ~/ship.cfg exists.

bender@bender:~$ cat ~/ship.cfg

Confirm ~/mission-orders.txt exists. The order for earth should appear.

bender@bender:~$ cat ~/mission-orders.txt

We are done. Exit the bender machine.

bender@bender:~$ exit

If you run the playbook again, you won't see any, changed tasks, as the remote hosts already have the completed file ship.cfg.

student@bchd:~$ ansible-playbook ~/mycode/template-playbook02.yml

Variables can always be defined at the command line when a playbook run is invoked. Run the playbook again, but define the variable planet as luna park. As CLI variables have the highest precedence, the playbook executor always has final control of the way variables are defined.

student@bchd:~$ ansible-playbook ~/mycode/template-playbook02.yml -e "planet='luna park'"

Once again, connect to the one of the remote hosts. Once again, confirm the ~/mission-orders.txt file now reflects instructions for visiting luna park

student@bchd:~$ ssh bender

Confirm ~/mission-orders.txt exists. The order for luna park should appear.

bender@bender:~$ cat ~/mission-orders.txt

We are done. Exit the bender machine.

bender@bender:~$ exit

If you want, go ahead and check out the other machines fry, zoidberg, and farnsworth machines.

CHALLENGE 01 - Rerun the playbook. Make the mission-orders.txt render with orders from cineplex 14.

CHALLENGE 02 - Rerun the playbook. Make the mission-orders.txt render with orders from omicron persei 8.

Let's try to make a jinja template that utilizes a loop. Create the following template that utilizes a jinja loop.

student@bchd:~$ vim ~/mycode/templates/crew_report.txt.j2

{% for member in crew %}
Crew Member: {{ member }}
    Description: {{ crew[member].description }}
    Skills: {{ crew[member].skills }}
{% endfor %}
To save and quit out of vim, press ESC and then type :wq.

Now create a playbook that will utilize our jinja2 looping template.

student@bchd:~$ vim ~/mycode/template-playbook03.yml

---
- name: Template with a loop
  hosts: fry
  connection: ansible.builtin.ssh
  gather_facts: no

  # these variables are used in the template ship.cfg.j2
  vars:
    crew:
      Zapp Brannigan:
        description: ship captain, lots of medals
        skills: leader, tactics, karaoke
      Kif:
        description: lieutenant
        skills: devoted, quiet
      Amy:
        description: PhD
        skills: engineering, physics, communication


  tasks:
    - name: Running a looping jinja template
      ansible.builtin.template:  
        src: templates/crew_report.txt.j2    # name of the template on ansible controller
        dest: ~/crew_report.txt              # name of the completed file to be placed on the target system
To save and quit out of vim, press ESC and then type :wq.

Run the playbook.

student@bchd:~$ ansible-playbook ~/mycode/template-playbook03.yml

SSH to fry and ensure ~/crew_report.txt is present.

student@bchd:~$ ssh fry

Ensure ~/crew_report.txt was created.

fry@fry:~$ cat ~/crew_report.txt

Crew Member: Zapp Brannigan
    Description: ship captain, lots of medals
    Skills: leader, tactics, karaoke
Crew Member: Kif
    Description: lieutenant
    Skills: devoted, quiet
Crew Member: Amy
    Description: PhD
    Skills: engineering, physics, communication
Note how our jinja template performed a for loop over the variable dataset provided in the playbook we created.

Exit out of fry machine.

fry@fry:~$ exit

CHALLENGE 03 (OPTIONAL - DIFFICULT) - Create a new template task. This single task should include a loop statement. Loop across the following list, [{"mission": "primary", "planet": "luna park"}, {"mission": "secondary", "planet": "cineplex 14"}]. The loop should produce two files, the first one should be titled primary-mission-orders.txt, and the second secondary-mission-orders.txt. Place both of these files on the remote hosts. Do all of this without modifying the template.

CHALLENGE 03 (SOLUTION) - This solution requires no modification of the existing templates. Instead, we leverage the usage of variable precedence by over-writing the value of planet each time through the loop:

## CHALLENGE 03 - SOLUTION
#
- name: Challenge 03 - This solution requires no modification of the existing templates. Instead, we leverage the usage of variable precedence
  ansible.builtin.template:
    src: templates/mission-orders.txt.j2     # name of the template on ansible controller
    dest: "~/{{ item.mission }}-mission-orders.txt"  # each time through the loop, we want a file named uniquely
  vars:
          planet: "{{ item.planet }}"
  loop:   # each time through the loop, each dict (list entry) will be an "item"
          - {"mission": "primary", "planet": "luna park"}
          - {"mission": "secondary", "planet": "cineplex 14"}  ## This is the list we want to loop across
That's it for this lab. If you tracking your work on an SCM, perform the following operations.

cd ~/mycode
git status
git add /home/student/mycode/*
git commit -m "using the ansible template module"
git push origin
cd ~/

