Lab Objective

The objective of this lab is to understand the details surrounding the execution of an Ansible playbook. Running a playbook uses the ansible-playbook command, whereas running ad-hoc commands use the ansible command. Playbooks are way better for lots of reasons, not the least of which is that they can be version controlled. Best way to learn is to dive in, so Let's get started!

In this lab, we will perform the following tasks:

    Write an Ansible Playbook running the apt module to install Figlet on targetted hosts.
    Specify the Planetexpress inventory for our target hosts.
    Verify the application was installed successfully.
    Analyze the ansible output difference when target hosts are already in the proper state.
    Write an Ansible Playbook which would run the apt module to ensure Figlet is not installed.
    Verify the application was removed.

Documentation regarding building Ansible Playbooks can be found here:
https://docs.ansible.com/ansible/latest/user_guide/playbooks.html

Another useful resource is the list of Ansible Keywords. Keywords are used to build playbook logic:
https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html
Procedure

    We'll be using the planetexpress team for this lab! Run the command below to prepare your environment.

    student@bchd:~$ bash ~/px/scripts/full-setup.sh

This lab uses the apt module. If you're a Red Hat user, than you know of a nearly identical program called, yum. Both of these programs are analogous to the Google Play Store app or iTunes app. All of these are clients that allow users to install pre-built software. Read the documentation on the 'apt' module.

student@bchd:~$ ansible-doc apt

Check out the documentation. If nothing else, notice that the fully qualified name, displayed at the top, shows the module is actually ansible.builtin.apt. Best practice would be to use this long name when referencing the apt module.

Press q to quit.

Ensure you have a directory titled ~/mycode to work in.

student@bchd:~$ mkdir -p ~/mycode

Use vim (or nano) to create a file called, ~/mycode/playbook-apt.yml

student@bchd:~$ vim ~/mycode/playbook-apt.yml

The following playbook will let us SSH to the target machine, and leverage control of the aptitude tool (apt) via Python (the module takes care of this). All we need to do is pass a minimum number of arguments, and see that 'figlet' is installed (a program that lets us make banners).

---
- name: Playbook - Install figlet    # metadata
  hosts: planetexpress:!farnsworth   # we want to take the planetexpress group and remove farnsworth
  connection: ssh     # default is to use the connection plugin ssh.py
  gather_facts: yes   # default is yes

  tasks:                                     # a list of what we want to do
  - name: using apt to install figlet        # metadata
    ansible.builtin.apt:                     # the module we want to run, apt.py
        name: figlet                         # parameter name has the value figlet
        state: present       # parameter state has the value present
    become: yes              # elevate status to admin, sudo, enable, etc.

Save and exit with Esc and then :wq

Answer the following questions about our new playbook:

    What are the keywords being used here?
        hosts, tasks, name, and become
    How did you know these were keywords?
        Check the bookmark, then look at the keywords under play and tasks

The playbook runs against the group planetexpress:!farnsworth (all of planetexpress but no farnsworth). These labels are resolved in the inventory Note: This inventory was installed by our setup script.

student@bchd:~$ batcat ~/mycode/inv/dev/hosts

Ansible makes it easy to see what groups and hosts are within an inventory with the following command.

student@bchd:~$ ansible-inventory -i ~/mycode/inv/dev/hosts --graph

Run the playbook and examine the output:

student@bchd:~$ ansible-playbook -i ~/mycode/inv/dev/hosts ~/mycode/playbook-apt.yml

Confirm that the remote machines now have the program 'figlet' installed.

student@bchd:~$ ssh bender

Type the word figlet to ensure figlet is installed. This will return an empty line, your machine isn't hanging!

bender@bender:~$ figlet

Great! Now create a banner by typing something:

my ascii text banner

Exit 'figlet' by pressing: ctrl + c

Exit the bender machine

bender@bender:~$ exit

Run the playbook again and examine the output. Note the difference in color and status.

student@bchd:~$ ansible-playbook ~/mycode/playbook-apt.yml

    Every task returned with the status ok and was printed in green text. This indicates no changes were required to bring the each host to the desired state. This is because Figlet was already installed on every host.

Use vim to create another file called, playbook-apt-absent.yml

student@bchd:~$ vim ~/mycode/playbook-apt-absent.yml

Copy the following into the playbook. Notice that this one has changed the state to absent.

---
- name: Playbook - Un-Install figlet
  hosts: planetexpress:!farnsworth   # remove farnsworth from the list of available hosts
  connection: ssh     # default is to use the connection plugin ssh.py
  gather_facts: yes   # default is yes

  tasks:
  - name: using apt to remove figlet
    ansible.builtin.apt:                 # this is the name of the module to use
        name: figlet
        state: absent    # this will REMOVE the application
    become: yes

    Note: Observe the difference in the name[0].tasks.name[0].apt.state value. By making a change to absent, we are specifying that the desired state of the host is to ensure the application Figlet is not installed. It must be absent to be in the desired state.

Save and exit with Esc and then :wq

Run the playbook and examine the output.

student@bchd:~$ ansible-playbook ~/mycode/playbook-apt-absent.yml

This should remove the application figlet on the targeted host machines. SSH to one or more of the targets to be sure.

student@bchd:~$ ssh bender

Type the word figlet to ensure figlet is removed.

bender@bender:~$ figlet

-bash: figlet: command not found

Exit the bender machine

bender@bender:~$ exit

Run the playbook again and examine the output. Notice that this time, ansible didn't feel the need to remove figlet again. This is because it was already removed.

student@bchd:~$ ansible-playbook ~/mycode/playbook-apt-absent.yml

Great job! The take away from this lab is the basics of a playbook, along with ansible's predictable nature.

That's it for this lab. If you tracking your work on an SCM, perform the following operations.

    cd ~/mycode
    git status
    git add /home/student/mycode/*
    git commit -m "First playbook"
    git push origin
    cd ~/


